from jinja2 import Environment, FileSystemLoader
import importlib.resources as pkg_resources

import stm_converter
import ros2interface.api as interface
# from stm_converter.

# from os.path import splitext
from os import getcwd, walk

from stm_converter.message_specification import MessageSpecification
import stm_converter.message_specification

class ROSMsgGenerator:
    def __init__(self, structs_found, header:str, namespace, msg: MessageSpecification=None):
        pathToTemplates = pkg_resources.files(stm_converter) / "resources/jinja_templates"
        self.env_ = Environment(loader=FileSystemLoader(pathToTemplates))
        self.structs_found_ = structs_found
        self.header_name_ = header
        self.ns = namespace
        # self.msg_filename_ = ""
        # self.msg_filename_ = splitext(header)[0].title()
        self.msg_filename_ = msg.msg_name_
        self.msg_content_ = tuple()
        self.interface_type_ = None
        self.msg = msg

        # print(self.structs_found_)
        # template = None

    def gen_msgs(self):
        template = self.env_.get_template("message.txt")
        # context = {"data_json": self.structs_found_}

        # for msg in self.structs_found_.items():
        #     # filename = f"{msg[0].title()}.msg"
        #     filename = f"{self.header_name_.title()}.msg"
        #     self.msg_filename_ = msg[0].title()

        #     context = {"msg": msg[1]}
        #      self.msg_content_ = msg[1]
        #      print(msg[1])

        #     with open(filename, mode="w", encoding="utf-8") as output:
        #         output.write(template.render(context))
        
        filename = self.msg.msg_name_ + ".msg"
        self.msg_content_ = self.msg.get_fields()
        # self.msg_filename_ = self.msg.msg_name_

        context = {"msg": self.msg_content_}

        with open(filename, mode="w", encoding="utf-8") as output:
                output.write(template.render(context))

    def gen_type_adapter(self): # use struct name from xmlParser class
        template = self.env_.get_template("type_adapter.txt")
        context = {"header": self.header_name_, 
                   "msg_file_name": self.msg.msg_name_,
                   "struct_name": self.msg.struct_name_,
                   "msg": self.msg_content_,
                   "namespace": self.ns
                   }
        
        # temp_file_name = f"{list(self.structs_found_.keys())[0]}_type_adapter.hpp"
        temp_file_name = f"{self.header_name_}_type_adapter.hpp"
        
        with open(temp_file_name, mode="w", encoding="utf-8") as output:
                output.write(template.render(context))

    def check_existance(self):
        is_present = False
        pkgs = list(interface.get_interface_packages().keys())

        msg_interfaces = interface.get_message_interfaces(pkgs)   
        for pkg, msgs in msg_interfaces.items():
            if "msg/" + self.msg_filename_ in msgs:
                # print(pkg) 
                is_present = True
                self.interface_type_ = f"{pkg}/msg/{self.msg_filename_}"
        # print(msg_interfaces)
        if not is_present:
            print(f"{self.msg_filename_}.msg does not exist")

        return is_present
    
    def check_autogenerated_msgs(self):
        # is_present_opaque = False
        is_present = False

        # for msg in self.structs_found_.items():
        #     for _, type in msg[1].items():
        #         if type not in stm_converter.message_specification.BASIC_TYPES:
        #             # assuming namespace typed
        #             msg = type.strip(f"{self.ns}::").title() + ".msg"
        #             for root, dirs, files in walk(getcwd()):
        #                 if msg in files:
        #                     is_present = True
        #                 else:
        #                     pass # generate msg for it

        for type in self.msg.get_types():
            if type not in stm_converter.message_specification.BASIC_TYPES:
                # assuming namespace typed
                msg = type.strip(f"{self.ns}::").title() + ".msg"
                for root, dirs, files in walk(getcwd()):
                    if msg in files:
                        is_present = True
                    else:
                        pass # generate msg for it
        
        return is_present

                    