#include <rclcpp/type_adapter.hpp>
#include "my_custom_interfaces/msg/{{header}}.hpp"
#include "{{header}}.hpp"

template<>
struct rclcpp::TypeAdapter<{{namespace}}::{{struct_name}}, my_custom_interfaces::msg::{{msg_file_name}}>
{
  using is_specialized = std::true_type;
  using custom_type = {{namespace}}::{{struct_name}};
  using ros_message_type = my_custom_interfaces::msg::{{msg_file_name}};

  static
  void
  convert_to_ros_message(
    const custom_type & source,
    ros_message_type & destination)
  {
    {%- for msgs in msg.items() %}
    {%- if msgs[1].rfind("[]") != -1 %}
    destination.{{msgs[0]}}.clear();
    destination.{{msgs[0]}}.reserve(source.{{msgs[0]}}.size());

    for (const auto& value : source.{{msgs[0]}}) {
      destination.{{msgs[0]}}.push_back(value);
    }
    {%- else %}
    destination.{{msgs[0]}} = source.{{msgs[0]}}
    {%- endif %}
    {%- endfor %}
  }

  static
  void
  convert_to_custom(
    const ros_message_type & source,
    custom_type & destination)
  {
    {%- for msgs in msg.items() %}
    {%- if msgs[1].rfind("[]") != -1 %}
    destination.{{msgs[0]}}.clear();
    destination.{{msgs[0]}}.reserve(source.{{msgs[0]}}.size());

    for (const auto& value : source.{{msgs[0]}}) {
      destination.{{msgs[0]}}.push_back(value);
    }
    {%- else %}
    destination.{{msgs[0]}} = source.{{msgs[0]}}
    {%- endif %}
    {%- endfor %}
  }
};
